use import="Json"
use import="Environment"

default NO_PARALLEL_TEST_PROJECTS='${E("NO_PARALLEL_TEST_PROJECTS")}'
default KOREBUILD_TEST_SKIPMONO='${E("KOREBUILD_TEST_SKIPMONO")}'
default TEST_ARTIFACT_DIR='${Path.Combine(Directory.GetCurrentDirectory(), "artifacts", "tests")}'

@{/*

xunit-test
    Run unit tests in your project.

projectFile=''
    Required. Path to the test project.json to execute

*/}

@{
    if (!string.Equals(KOREBUILD_TEST_SKIPMONO, "1") && !string.Equals(KOREBUILD_TEST_SKIPMONO, "true"))
    {
        var projectText = File.ReadAllText(projectFile);
        var project = (JsonObject)Json.Deserialize(projectText);

        if (project.Keys.Contains("testRunner"))
        {
            var projectFolder = Path.GetDirectoryName(projectFile);
            var projectName = Path.GetFileName(projectFolder);

            var noParallelTestProjects = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
            if (!string.IsNullOrEmpty(NO_PARALLEL_TEST_PROJECTS))
            {
                noParallelTestProjects.UnionWith(NO_PARALLEL_TEST_PROJECTS.Split((char)','));
            }

            var testArgs = noParallelTestProjects.Contains(projectName) ? " -parallel none" : "";

            var configs = project.ValueAsJsonObject("frameworks");
            var targetFrameworks = configs == null
                ? new string[0]
                : configs
                    .Keys
                    .Where(k => k.StartsWith("dnx45", StringComparison.OrdinalIgnoreCase)
                                || k.StartsWith("net45", StringComparison.OrdinalIgnoreCase));

            var xunitRunner = Path.GetFullPath(Path.Combine(KoreBuildFolderPath, "build", "xunit.runner.console", "tools", "xunit.console.exe"));
            var xunitCoreFolder = Path.GetFullPath(Path.Combine(KoreBuildFolderPath, "build", "xunit.core", "build", "_desktop"));
            
            foreach (var framework in targetFrameworks)
            {
                if (IsLinux)
                {
                    // Work around issue with testing in parallel on Mono.
                    testArgs = " -parallel none";
                }

                var publishFolder = Path.Combine(TEST_ARTIFACT_DIR, projectName, framework);
                DotnetPublish(projectFile, publishFolder, framework);

                // Copy xunit.execution.desktop for dnx451. This is required in order to load the binding
                // redirects for dlls. See this thread for more details:
                // https://github.com/xunit/xunit/issues/732
                if (framework.StartsWith("dnx"))
                {
                    Copy(xunitCoreFolder, publishFolder, "*.*", true);
                }

                var targetTestDll = projectName + ".dll";

                ExecClr(xunitRunner, targetTestDll + " " + testArgs, publishFolder);
            }
        }
    }
}
